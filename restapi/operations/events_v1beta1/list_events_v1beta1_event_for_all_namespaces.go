// Code generated by go-swagger; DO NOT EDIT.

package events_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListEventsV1beta1EventForAllNamespacesHandlerFunc turns a function with the right signature into a list events v1beta1 event for all namespaces handler
type ListEventsV1beta1EventForAllNamespacesHandlerFunc func(ListEventsV1beta1EventForAllNamespacesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListEventsV1beta1EventForAllNamespacesHandlerFunc) Handle(params ListEventsV1beta1EventForAllNamespacesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListEventsV1beta1EventForAllNamespacesHandler interface for that can handle valid list events v1beta1 event for all namespaces params
type ListEventsV1beta1EventForAllNamespacesHandler interface {
	Handle(ListEventsV1beta1EventForAllNamespacesParams, interface{}) middleware.Responder
}

// NewListEventsV1beta1EventForAllNamespaces creates a new http.Handler for the list events v1beta1 event for all namespaces operation
func NewListEventsV1beta1EventForAllNamespaces(ctx *middleware.Context, handler ListEventsV1beta1EventForAllNamespacesHandler) *ListEventsV1beta1EventForAllNamespaces {
	return &ListEventsV1beta1EventForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListEventsV1beta1EventForAllNamespaces swagger:route GET /apis/events.k8s.io/v1beta1/events events_v1beta1 listEventsV1beta1EventForAllNamespaces

list or watch objects of kind Event

*/
type ListEventsV1beta1EventForAllNamespaces struct {
	Context *middleware.Context
	Handler ListEventsV1beta1EventForAllNamespacesHandler
}

func (o *ListEventsV1beta1EventForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListEventsV1beta1EventForAllNamespacesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
