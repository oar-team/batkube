// Code generated by go-swagger; DO NOT EDIT.

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateAppsV1NamespacedDeploymentHandlerFunc turns a function with the right signature into a create apps v1 namespaced deployment handler
type CreateAppsV1NamespacedDeploymentHandlerFunc func(CreateAppsV1NamespacedDeploymentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAppsV1NamespacedDeploymentHandlerFunc) Handle(params CreateAppsV1NamespacedDeploymentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateAppsV1NamespacedDeploymentHandler interface for that can handle valid create apps v1 namespaced deployment params
type CreateAppsV1NamespacedDeploymentHandler interface {
	Handle(CreateAppsV1NamespacedDeploymentParams, interface{}) middleware.Responder
}

// NewCreateAppsV1NamespacedDeployment creates a new http.Handler for the create apps v1 namespaced deployment operation
func NewCreateAppsV1NamespacedDeployment(ctx *middleware.Context, handler CreateAppsV1NamespacedDeploymentHandler) *CreateAppsV1NamespacedDeployment {
	return &CreateAppsV1NamespacedDeployment{Context: ctx, Handler: handler}
}

/*CreateAppsV1NamespacedDeployment swagger:route POST /apis/apps/v1/namespaces/{namespace}/deployments apps_v1 createAppsV1NamespacedDeployment

create a Deployment

*/
type CreateAppsV1NamespacedDeployment struct {
	Context *middleware.Context
	Handler CreateAppsV1NamespacedDeploymentHandler
}

func (o *CreateAppsV1NamespacedDeployment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateAppsV1NamespacedDeploymentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
