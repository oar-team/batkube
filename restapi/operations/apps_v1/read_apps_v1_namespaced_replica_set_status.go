// Code generated by go-swagger; DO NOT EDIT.

package apps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadAppsV1NamespacedReplicaSetStatusHandlerFunc turns a function with the right signature into a read apps v1 namespaced replica set status handler
type ReadAppsV1NamespacedReplicaSetStatusHandlerFunc func(ReadAppsV1NamespacedReplicaSetStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadAppsV1NamespacedReplicaSetStatusHandlerFunc) Handle(params ReadAppsV1NamespacedReplicaSetStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReadAppsV1NamespacedReplicaSetStatusHandler interface for that can handle valid read apps v1 namespaced replica set status params
type ReadAppsV1NamespacedReplicaSetStatusHandler interface {
	Handle(ReadAppsV1NamespacedReplicaSetStatusParams, interface{}) middleware.Responder
}

// NewReadAppsV1NamespacedReplicaSetStatus creates a new http.Handler for the read apps v1 namespaced replica set status operation
func NewReadAppsV1NamespacedReplicaSetStatus(ctx *middleware.Context, handler ReadAppsV1NamespacedReplicaSetStatusHandler) *ReadAppsV1NamespacedReplicaSetStatus {
	return &ReadAppsV1NamespacedReplicaSetStatus{Context: ctx, Handler: handler}
}

/*ReadAppsV1NamespacedReplicaSetStatus swagger:route GET /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status apps_v1 readAppsV1NamespacedReplicaSetStatus

read status of the specified ReplicaSet

*/
type ReadAppsV1NamespacedReplicaSetStatus struct {
	Context *middleware.Context
	Handler ReadAppsV1NamespacedReplicaSetStatusHandler
}

func (o *ReadAppsV1NamespacedReplicaSetStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadAppsV1NamespacedReplicaSetStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
