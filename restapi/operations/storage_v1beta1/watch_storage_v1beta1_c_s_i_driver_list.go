// Code generated by go-swagger; DO NOT EDIT.

package storage_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchStorageV1beta1CSIDriverListHandlerFunc turns a function with the right signature into a watch storage v1beta1 c s i driver list handler
type WatchStorageV1beta1CSIDriverListHandlerFunc func(WatchStorageV1beta1CSIDriverListParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchStorageV1beta1CSIDriverListHandlerFunc) Handle(params WatchStorageV1beta1CSIDriverListParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// WatchStorageV1beta1CSIDriverListHandler interface for that can handle valid watch storage v1beta1 c s i driver list params
type WatchStorageV1beta1CSIDriverListHandler interface {
	Handle(WatchStorageV1beta1CSIDriverListParams, interface{}) middleware.Responder
}

// NewWatchStorageV1beta1CSIDriverList creates a new http.Handler for the watch storage v1beta1 c s i driver list operation
func NewWatchStorageV1beta1CSIDriverList(ctx *middleware.Context, handler WatchStorageV1beta1CSIDriverListHandler) *WatchStorageV1beta1CSIDriverList {
	return &WatchStorageV1beta1CSIDriverList{Context: ctx, Handler: handler}
}

/*WatchStorageV1beta1CSIDriverList swagger:route GET /apis/storage.k8s.io/v1beta1/watch/csidrivers storage_v1beta1 watchStorageV1beta1CSIDriverList

watch individual changes to a list of CSIDriver. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchStorageV1beta1CSIDriverList struct {
	Context *middleware.Context
	Handler WatchStorageV1beta1CSIDriverListHandler
}

func (o *WatchStorageV1beta1CSIDriverList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchStorageV1beta1CSIDriverListParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
