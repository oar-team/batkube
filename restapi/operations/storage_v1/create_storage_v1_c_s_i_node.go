// Code generated by go-swagger; DO NOT EDIT.

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateStorageV1CSINodeHandlerFunc turns a function with the right signature into a create storage v1 c s i node handler
type CreateStorageV1CSINodeHandlerFunc func(CreateStorageV1CSINodeParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateStorageV1CSINodeHandlerFunc) Handle(params CreateStorageV1CSINodeParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateStorageV1CSINodeHandler interface for that can handle valid create storage v1 c s i node params
type CreateStorageV1CSINodeHandler interface {
	Handle(CreateStorageV1CSINodeParams, interface{}) middleware.Responder
}

// NewCreateStorageV1CSINode creates a new http.Handler for the create storage v1 c s i node operation
func NewCreateStorageV1CSINode(ctx *middleware.Context, handler CreateStorageV1CSINodeHandler) *CreateStorageV1CSINode {
	return &CreateStorageV1CSINode{Context: ctx, Handler: handler}
}

/*CreateStorageV1CSINode swagger:route POST /apis/storage.k8s.io/v1/csinodes storage_v1 createStorageV1CSINode

create a CSINode

*/
type CreateStorageV1CSINode struct {
	Context *middleware.Context
	Handler CreateStorageV1CSINodeHandler
}

func (o *CreateStorageV1CSINode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateStorageV1CSINodeParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
