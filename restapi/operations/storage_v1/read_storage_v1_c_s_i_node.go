// Code generated by go-swagger; DO NOT EDIT.

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReadStorageV1CSINodeHandlerFunc turns a function with the right signature into a read storage v1 c s i node handler
type ReadStorageV1CSINodeHandlerFunc func(ReadStorageV1CSINodeParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReadStorageV1CSINodeHandlerFunc) Handle(params ReadStorageV1CSINodeParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReadStorageV1CSINodeHandler interface for that can handle valid read storage v1 c s i node params
type ReadStorageV1CSINodeHandler interface {
	Handle(ReadStorageV1CSINodeParams, interface{}) middleware.Responder
}

// NewReadStorageV1CSINode creates a new http.Handler for the read storage v1 c s i node operation
func NewReadStorageV1CSINode(ctx *middleware.Context, handler ReadStorageV1CSINodeHandler) *ReadStorageV1CSINode {
	return &ReadStorageV1CSINode{Context: ctx, Handler: handler}
}

/*ReadStorageV1CSINode swagger:route GET /apis/storage.k8s.io/v1/csinodes/{name} storage_v1 readStorageV1CSINode

read the specified CSINode

*/
type ReadStorageV1CSINode struct {
	Context *middleware.Context
	Handler ReadStorageV1CSINodeHandler
}

func (o *ReadStorageV1CSINode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReadStorageV1CSINodeParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
