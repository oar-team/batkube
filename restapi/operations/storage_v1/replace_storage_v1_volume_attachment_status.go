// Code generated by go-swagger; DO NOT EDIT.

package storage_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceStorageV1VolumeAttachmentStatusHandlerFunc turns a function with the right signature into a replace storage v1 volume attachment status handler
type ReplaceStorageV1VolumeAttachmentStatusHandlerFunc func(ReplaceStorageV1VolumeAttachmentStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceStorageV1VolumeAttachmentStatusHandlerFunc) Handle(params ReplaceStorageV1VolumeAttachmentStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReplaceStorageV1VolumeAttachmentStatusHandler interface for that can handle valid replace storage v1 volume attachment status params
type ReplaceStorageV1VolumeAttachmentStatusHandler interface {
	Handle(ReplaceStorageV1VolumeAttachmentStatusParams, interface{}) middleware.Responder
}

// NewReplaceStorageV1VolumeAttachmentStatus creates a new http.Handler for the replace storage v1 volume attachment status operation
func NewReplaceStorageV1VolumeAttachmentStatus(ctx *middleware.Context, handler ReplaceStorageV1VolumeAttachmentStatusHandler) *ReplaceStorageV1VolumeAttachmentStatus {
	return &ReplaceStorageV1VolumeAttachmentStatus{Context: ctx, Handler: handler}
}

/*ReplaceStorageV1VolumeAttachmentStatus swagger:route PUT /apis/storage.k8s.io/v1/volumeattachments/{name}/status storage_v1 replaceStorageV1VolumeAttachmentStatus

replace status of the specified VolumeAttachment

*/
type ReplaceStorageV1VolumeAttachmentStatus struct {
	Context *middleware.Context
	Handler ReplaceStorageV1VolumeAttachmentStatusHandler
}

func (o *ReplaceStorageV1VolumeAttachmentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceStorageV1VolumeAttachmentStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
