// Code generated by go-swagger; DO NOT EDIT.

package discovery_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc turns a function with the right signature into a list discovery v1beta1 namespaced endpoint slice handler
type ListDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc func(ListDiscoveryV1beta1NamespacedEndpointSliceParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListDiscoveryV1beta1NamespacedEndpointSliceHandlerFunc) Handle(params ListDiscoveryV1beta1NamespacedEndpointSliceParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListDiscoveryV1beta1NamespacedEndpointSliceHandler interface for that can handle valid list discovery v1beta1 namespaced endpoint slice params
type ListDiscoveryV1beta1NamespacedEndpointSliceHandler interface {
	Handle(ListDiscoveryV1beta1NamespacedEndpointSliceParams, interface{}) middleware.Responder
}

// NewListDiscoveryV1beta1NamespacedEndpointSlice creates a new http.Handler for the list discovery v1beta1 namespaced endpoint slice operation
func NewListDiscoveryV1beta1NamespacedEndpointSlice(ctx *middleware.Context, handler ListDiscoveryV1beta1NamespacedEndpointSliceHandler) *ListDiscoveryV1beta1NamespacedEndpointSlice {
	return &ListDiscoveryV1beta1NamespacedEndpointSlice{Context: ctx, Handler: handler}
}

/*ListDiscoveryV1beta1NamespacedEndpointSlice swagger:route GET /apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices discovery_v1beta1 listDiscoveryV1beta1NamespacedEndpointSlice

list or watch objects of kind EndpointSlice

*/
type ListDiscoveryV1beta1NamespacedEndpointSlice struct {
	Context *middleware.Context
	Handler ListDiscoveryV1beta1NamespacedEndpointSliceHandler
}

func (o *ListDiscoveryV1beta1NamespacedEndpointSlice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListDiscoveryV1beta1NamespacedEndpointSliceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
