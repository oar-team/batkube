// Code generated by go-swagger; DO NOT EDIT.

package rbac_authorization_v1beta1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchRbacAuthorizationV1beta1ClusterRoleHandlerFunc turns a function with the right signature into a patch rbac authorization v1beta1 cluster role handler
type PatchRbacAuthorizationV1beta1ClusterRoleHandlerFunc func(PatchRbacAuthorizationV1beta1ClusterRoleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchRbacAuthorizationV1beta1ClusterRoleHandlerFunc) Handle(params PatchRbacAuthorizationV1beta1ClusterRoleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchRbacAuthorizationV1beta1ClusterRoleHandler interface for that can handle valid patch rbac authorization v1beta1 cluster role params
type PatchRbacAuthorizationV1beta1ClusterRoleHandler interface {
	Handle(PatchRbacAuthorizationV1beta1ClusterRoleParams, interface{}) middleware.Responder
}

// NewPatchRbacAuthorizationV1beta1ClusterRole creates a new http.Handler for the patch rbac authorization v1beta1 cluster role operation
func NewPatchRbacAuthorizationV1beta1ClusterRole(ctx *middleware.Context, handler PatchRbacAuthorizationV1beta1ClusterRoleHandler) *PatchRbacAuthorizationV1beta1ClusterRole {
	return &PatchRbacAuthorizationV1beta1ClusterRole{Context: ctx, Handler: handler}
}

/*PatchRbacAuthorizationV1beta1ClusterRole swagger:route PATCH /apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name} rbacAuthorization_v1beta1 patchRbacAuthorizationV1beta1ClusterRole

partially update the specified ClusterRole

*/
type PatchRbacAuthorizationV1beta1ClusterRole struct {
	Context *middleware.Context
	Handler PatchRbacAuthorizationV1beta1ClusterRoleHandler
}

func (o *PatchRbacAuthorizationV1beta1ClusterRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchRbacAuthorizationV1beta1ClusterRoleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
