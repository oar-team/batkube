// Code generated by go-swagger; DO NOT EDIT.

package coordination_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListCoordinationV1LeaseForAllNamespacesHandlerFunc turns a function with the right signature into a list coordination v1 lease for all namespaces handler
type ListCoordinationV1LeaseForAllNamespacesHandlerFunc func(ListCoordinationV1LeaseForAllNamespacesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCoordinationV1LeaseForAllNamespacesHandlerFunc) Handle(params ListCoordinationV1LeaseForAllNamespacesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListCoordinationV1LeaseForAllNamespacesHandler interface for that can handle valid list coordination v1 lease for all namespaces params
type ListCoordinationV1LeaseForAllNamespacesHandler interface {
	Handle(ListCoordinationV1LeaseForAllNamespacesParams, interface{}) middleware.Responder
}

// NewListCoordinationV1LeaseForAllNamespaces creates a new http.Handler for the list coordination v1 lease for all namespaces operation
func NewListCoordinationV1LeaseForAllNamespaces(ctx *middleware.Context, handler ListCoordinationV1LeaseForAllNamespacesHandler) *ListCoordinationV1LeaseForAllNamespaces {
	return &ListCoordinationV1LeaseForAllNamespaces{Context: ctx, Handler: handler}
}

/*ListCoordinationV1LeaseForAllNamespaces swagger:route GET /apis/coordination.k8s.io/v1/leases coordination_v1 listCoordinationV1LeaseForAllNamespaces

list or watch objects of kind Lease

*/
type ListCoordinationV1LeaseForAllNamespaces struct {
	Context *middleware.Context
	Handler ListCoordinationV1LeaseForAllNamespacesHandler
}

func (o *ListCoordinationV1LeaseForAllNamespaces) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListCoordinationV1LeaseForAllNamespacesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
