// Code generated by go-swagger; DO NOT EDIT.

package coordination_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCoordinationV1CollectionNamespacedLeaseHandlerFunc turns a function with the right signature into a delete coordination v1 collection namespaced lease handler
type DeleteCoordinationV1CollectionNamespacedLeaseHandlerFunc func(DeleteCoordinationV1CollectionNamespacedLeaseParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCoordinationV1CollectionNamespacedLeaseHandlerFunc) Handle(params DeleteCoordinationV1CollectionNamespacedLeaseParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteCoordinationV1CollectionNamespacedLeaseHandler interface for that can handle valid delete coordination v1 collection namespaced lease params
type DeleteCoordinationV1CollectionNamespacedLeaseHandler interface {
	Handle(DeleteCoordinationV1CollectionNamespacedLeaseParams, interface{}) middleware.Responder
}

// NewDeleteCoordinationV1CollectionNamespacedLease creates a new http.Handler for the delete coordination v1 collection namespaced lease operation
func NewDeleteCoordinationV1CollectionNamespacedLease(ctx *middleware.Context, handler DeleteCoordinationV1CollectionNamespacedLeaseHandler) *DeleteCoordinationV1CollectionNamespacedLease {
	return &DeleteCoordinationV1CollectionNamespacedLease{Context: ctx, Handler: handler}
}

/*DeleteCoordinationV1CollectionNamespacedLease swagger:route DELETE /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases coordination_v1 deleteCoordinationV1CollectionNamespacedLease

delete collection of Lease

*/
type DeleteCoordinationV1CollectionNamespacedLease struct {
	Context *middleware.Context
	Handler DeleteCoordinationV1CollectionNamespacedLeaseHandler
}

func (o *DeleteCoordinationV1CollectionNamespacedLease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCoordinationV1CollectionNamespacedLeaseParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
