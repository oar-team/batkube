// Code generated by go-swagger; DO NOT EDIT.

package scheduling_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// WatchSchedulingV1alpha1PriorityClassListHandlerFunc turns a function with the right signature into a watch scheduling v1alpha1 priority class list handler
type WatchSchedulingV1alpha1PriorityClassListHandlerFunc func(WatchSchedulingV1alpha1PriorityClassListParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn WatchSchedulingV1alpha1PriorityClassListHandlerFunc) Handle(params WatchSchedulingV1alpha1PriorityClassListParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// WatchSchedulingV1alpha1PriorityClassListHandler interface for that can handle valid watch scheduling v1alpha1 priority class list params
type WatchSchedulingV1alpha1PriorityClassListHandler interface {
	Handle(WatchSchedulingV1alpha1PriorityClassListParams, interface{}) middleware.Responder
}

// NewWatchSchedulingV1alpha1PriorityClassList creates a new http.Handler for the watch scheduling v1alpha1 priority class list operation
func NewWatchSchedulingV1alpha1PriorityClassList(ctx *middleware.Context, handler WatchSchedulingV1alpha1PriorityClassListHandler) *WatchSchedulingV1alpha1PriorityClassList {
	return &WatchSchedulingV1alpha1PriorityClassList{Context: ctx, Handler: handler}
}

/*WatchSchedulingV1alpha1PriorityClassList swagger:route GET /apis/scheduling.k8s.io/v1alpha1/watch/priorityclasses scheduling_v1alpha1 watchSchedulingV1alpha1PriorityClassList

watch individual changes to a list of PriorityClass. deprecated: use the 'watch' parameter with a list operation instead.

*/
type WatchSchedulingV1alpha1PriorityClassList struct {
	Context *middleware.Context
	Handler WatchSchedulingV1alpha1PriorityClassListHandler
}

func (o *WatchSchedulingV1alpha1PriorityClassList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewWatchSchedulingV1alpha1PriorityClassListParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
