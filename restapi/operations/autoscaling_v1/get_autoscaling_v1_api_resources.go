// Code generated by go-swagger; DO NOT EDIT.

package autoscaling_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAutoscalingV1APIResourcesHandlerFunc turns a function with the right signature into a get autoscaling v1 API resources handler
type GetAutoscalingV1APIResourcesHandlerFunc func(GetAutoscalingV1APIResourcesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAutoscalingV1APIResourcesHandlerFunc) Handle(params GetAutoscalingV1APIResourcesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAutoscalingV1APIResourcesHandler interface for that can handle valid get autoscaling v1 API resources params
type GetAutoscalingV1APIResourcesHandler interface {
	Handle(GetAutoscalingV1APIResourcesParams, interface{}) middleware.Responder
}

// NewGetAutoscalingV1APIResources creates a new http.Handler for the get autoscaling v1 API resources operation
func NewGetAutoscalingV1APIResources(ctx *middleware.Context, handler GetAutoscalingV1APIResourcesHandler) *GetAutoscalingV1APIResources {
	return &GetAutoscalingV1APIResources{Context: ctx, Handler: handler}
}

/*GetAutoscalingV1APIResources swagger:route GET /apis/autoscaling/v1/ autoscaling_v1 getAutoscalingV1ApiResources

get available resources

*/
type GetAutoscalingV1APIResources struct {
	Context *middleware.Context
	Handler GetAutoscalingV1APIResourcesHandler
}

func (o *GetAutoscalingV1APIResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAutoscalingV1APIResourcesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
