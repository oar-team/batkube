// Code generated by go-swagger; DO NOT EDIT.

package auditregistration_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAuditregistrationV1alpha1APIResourcesHandlerFunc turns a function with the right signature into a get auditregistration v1alpha1 API resources handler
type GetAuditregistrationV1alpha1APIResourcesHandlerFunc func(GetAuditregistrationV1alpha1APIResourcesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuditregistrationV1alpha1APIResourcesHandlerFunc) Handle(params GetAuditregistrationV1alpha1APIResourcesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetAuditregistrationV1alpha1APIResourcesHandler interface for that can handle valid get auditregistration v1alpha1 API resources params
type GetAuditregistrationV1alpha1APIResourcesHandler interface {
	Handle(GetAuditregistrationV1alpha1APIResourcesParams, interface{}) middleware.Responder
}

// NewGetAuditregistrationV1alpha1APIResources creates a new http.Handler for the get auditregistration v1alpha1 API resources operation
func NewGetAuditregistrationV1alpha1APIResources(ctx *middleware.Context, handler GetAuditregistrationV1alpha1APIResourcesHandler) *GetAuditregistrationV1alpha1APIResources {
	return &GetAuditregistrationV1alpha1APIResources{Context: ctx, Handler: handler}
}

/*GetAuditregistrationV1alpha1APIResources swagger:route GET /apis/auditregistration.k8s.io/v1alpha1/ auditregistration_v1alpha1 getAuditregistrationV1alpha1ApiResources

get available resources

*/
type GetAuditregistrationV1alpha1APIResources struct {
	Context *middleware.Context
	Handler GetAuditregistrationV1alpha1APIResourcesHandler
}

func (o *GetAuditregistrationV1alpha1APIResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAuditregistrationV1alpha1APIResourcesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
