// Code generated by go-swagger; DO NOT EDIT.

package auditregistration_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceAuditregistrationV1alpha1AuditSinkHandlerFunc turns a function with the right signature into a replace auditregistration v1alpha1 audit sink handler
type ReplaceAuditregistrationV1alpha1AuditSinkHandlerFunc func(ReplaceAuditregistrationV1alpha1AuditSinkParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceAuditregistrationV1alpha1AuditSinkHandlerFunc) Handle(params ReplaceAuditregistrationV1alpha1AuditSinkParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReplaceAuditregistrationV1alpha1AuditSinkHandler interface for that can handle valid replace auditregistration v1alpha1 audit sink params
type ReplaceAuditregistrationV1alpha1AuditSinkHandler interface {
	Handle(ReplaceAuditregistrationV1alpha1AuditSinkParams, interface{}) middleware.Responder
}

// NewReplaceAuditregistrationV1alpha1AuditSink creates a new http.Handler for the replace auditregistration v1alpha1 audit sink operation
func NewReplaceAuditregistrationV1alpha1AuditSink(ctx *middleware.Context, handler ReplaceAuditregistrationV1alpha1AuditSinkHandler) *ReplaceAuditregistrationV1alpha1AuditSink {
	return &ReplaceAuditregistrationV1alpha1AuditSink{Context: ctx, Handler: handler}
}

/*ReplaceAuditregistrationV1alpha1AuditSink swagger:route PUT /apis/auditregistration.k8s.io/v1alpha1/auditsinks/{name} auditregistration_v1alpha1 replaceAuditregistrationV1alpha1AuditSink

replace the specified AuditSink

*/
type ReplaceAuditregistrationV1alpha1AuditSink struct {
	Context *middleware.Context
	Handler ReplaceAuditregistrationV1alpha1AuditSinkHandler
}

func (o *ReplaceAuditregistrationV1alpha1AuditSink) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceAuditregistrationV1alpha1AuditSinkParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
