// Code generated by go-swagger; DO NOT EDIT.

package settings_v1alpha1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListSettingsV1alpha1NamespacedPodPresetHandlerFunc turns a function with the right signature into a list settings v1alpha1 namespaced pod preset handler
type ListSettingsV1alpha1NamespacedPodPresetHandlerFunc func(ListSettingsV1alpha1NamespacedPodPresetParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListSettingsV1alpha1NamespacedPodPresetHandlerFunc) Handle(params ListSettingsV1alpha1NamespacedPodPresetParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListSettingsV1alpha1NamespacedPodPresetHandler interface for that can handle valid list settings v1alpha1 namespaced pod preset params
type ListSettingsV1alpha1NamespacedPodPresetHandler interface {
	Handle(ListSettingsV1alpha1NamespacedPodPresetParams, interface{}) middleware.Responder
}

// NewListSettingsV1alpha1NamespacedPodPreset creates a new http.Handler for the list settings v1alpha1 namespaced pod preset operation
func NewListSettingsV1alpha1NamespacedPodPreset(ctx *middleware.Context, handler ListSettingsV1alpha1NamespacedPodPresetHandler) *ListSettingsV1alpha1NamespacedPodPreset {
	return &ListSettingsV1alpha1NamespacedPodPreset{Context: ctx, Handler: handler}
}

/*ListSettingsV1alpha1NamespacedPodPreset swagger:route GET /apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets settings_v1alpha1 listSettingsV1alpha1NamespacedPodPreset

list or watch objects of kind PodPreset

*/
type ListSettingsV1alpha1NamespacedPodPreset struct {
	Context *middleware.Context
	Handler ListSettingsV1alpha1NamespacedPodPresetHandler
}

func (o *ListSettingsV1alpha1NamespacedPodPreset) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListSettingsV1alpha1NamespacedPodPresetParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
