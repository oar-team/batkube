// Code generated by go-swagger; DO NOT EDIT.

package batch_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetBatchV1APIResourcesHandlerFunc turns a function with the right signature into a get batch v1 API resources handler
type GetBatchV1APIResourcesHandlerFunc func(GetBatchV1APIResourcesParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBatchV1APIResourcesHandlerFunc) Handle(params GetBatchV1APIResourcesParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetBatchV1APIResourcesHandler interface for that can handle valid get batch v1 API resources params
type GetBatchV1APIResourcesHandler interface {
	Handle(GetBatchV1APIResourcesParams, interface{}) middleware.Responder
}

// NewGetBatchV1APIResources creates a new http.Handler for the get batch v1 API resources operation
func NewGetBatchV1APIResources(ctx *middleware.Context, handler GetBatchV1APIResourcesHandler) *GetBatchV1APIResources {
	return &GetBatchV1APIResources{Context: ctx, Handler: handler}
}

/*GetBatchV1APIResources swagger:route GET /apis/batch/v1/ batch_v1 getBatchV1ApiResources

get available resources

*/
type GetBatchV1APIResources struct {
	Context *middleware.Context
	Handler GetBatchV1APIResourcesHandler
}

func (o *GetBatchV1APIResources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBatchV1APIResourcesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
