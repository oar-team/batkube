// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReplaceCoreV1NamespacedPodStatusHandlerFunc turns a function with the right signature into a replace core v1 namespaced pod status handler
type ReplaceCoreV1NamespacedPodStatusHandlerFunc func(ReplaceCoreV1NamespacedPodStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplaceCoreV1NamespacedPodStatusHandlerFunc) Handle(params ReplaceCoreV1NamespacedPodStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ReplaceCoreV1NamespacedPodStatusHandler interface for that can handle valid replace core v1 namespaced pod status params
type ReplaceCoreV1NamespacedPodStatusHandler interface {
	Handle(ReplaceCoreV1NamespacedPodStatusParams, interface{}) middleware.Responder
}

// NewReplaceCoreV1NamespacedPodStatus creates a new http.Handler for the replace core v1 namespaced pod status operation
func NewReplaceCoreV1NamespacedPodStatus(ctx *middleware.Context, handler ReplaceCoreV1NamespacedPodStatusHandler) *ReplaceCoreV1NamespacedPodStatus {
	return &ReplaceCoreV1NamespacedPodStatus{Context: ctx, Handler: handler}
}

/*ReplaceCoreV1NamespacedPodStatus swagger:route PUT /api/v1/namespaces/{namespace}/pods/{name}/status core_v1 replaceCoreV1NamespacedPodStatus

replace status of the specified Pod

*/
type ReplaceCoreV1NamespacedPodStatus struct {
	Context *middleware.Context
	Handler ReplaceCoreV1NamespacedPodStatusHandler
}

func (o *ReplaceCoreV1NamespacedPodStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplaceCoreV1NamespacedPodStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
