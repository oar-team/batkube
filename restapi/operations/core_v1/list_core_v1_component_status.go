// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListCoreV1ComponentStatusHandlerFunc turns a function with the right signature into a list core v1 component status handler
type ListCoreV1ComponentStatusHandlerFunc func(ListCoreV1ComponentStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ListCoreV1ComponentStatusHandlerFunc) Handle(params ListCoreV1ComponentStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ListCoreV1ComponentStatusHandler interface for that can handle valid list core v1 component status params
type ListCoreV1ComponentStatusHandler interface {
	Handle(ListCoreV1ComponentStatusParams, interface{}) middleware.Responder
}

// NewListCoreV1ComponentStatus creates a new http.Handler for the list core v1 component status operation
func NewListCoreV1ComponentStatus(ctx *middleware.Context, handler ListCoreV1ComponentStatusHandler) *ListCoreV1ComponentStatus {
	return &ListCoreV1ComponentStatus{Context: ctx, Handler: handler}
}

/*ListCoreV1ComponentStatus swagger:route GET /api/v1/componentstatuses core_v1 listCoreV1ComponentStatus

list objects of kind ComponentStatus

*/
type ListCoreV1ComponentStatus struct {
	Context *middleware.Context
	Handler ListCoreV1ComponentStatusHandler
}

func (o *ListCoreV1ComponentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListCoreV1ComponentStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
