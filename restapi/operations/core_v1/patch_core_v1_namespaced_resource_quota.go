// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchCoreV1NamespacedResourceQuotaHandlerFunc turns a function with the right signature into a patch core v1 namespaced resource quota handler
type PatchCoreV1NamespacedResourceQuotaHandlerFunc func(PatchCoreV1NamespacedResourceQuotaParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchCoreV1NamespacedResourceQuotaHandlerFunc) Handle(params PatchCoreV1NamespacedResourceQuotaParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchCoreV1NamespacedResourceQuotaHandler interface for that can handle valid patch core v1 namespaced resource quota params
type PatchCoreV1NamespacedResourceQuotaHandler interface {
	Handle(PatchCoreV1NamespacedResourceQuotaParams, interface{}) middleware.Responder
}

// NewPatchCoreV1NamespacedResourceQuota creates a new http.Handler for the patch core v1 namespaced resource quota operation
func NewPatchCoreV1NamespacedResourceQuota(ctx *middleware.Context, handler PatchCoreV1NamespacedResourceQuotaHandler) *PatchCoreV1NamespacedResourceQuota {
	return &PatchCoreV1NamespacedResourceQuota{Context: ctx, Handler: handler}
}

/*PatchCoreV1NamespacedResourceQuota swagger:route PATCH /api/v1/namespaces/{namespace}/resourcequotas/{name} core_v1 patchCoreV1NamespacedResourceQuota

partially update the specified ResourceQuota

*/
type PatchCoreV1NamespacedResourceQuota struct {
	Context *middleware.Context
	Handler PatchCoreV1NamespacedResourceQuotaHandler
}

func (o *PatchCoreV1NamespacedResourceQuota) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchCoreV1NamespacedResourceQuotaParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
