// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCoreV1NamespacedPodHandlerFunc turns a function with the right signature into a create core v1 namespaced pod handler
type CreateCoreV1NamespacedPodHandlerFunc func(CreateCoreV1NamespacedPodParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCoreV1NamespacedPodHandlerFunc) Handle(params CreateCoreV1NamespacedPodParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateCoreV1NamespacedPodHandler interface for that can handle valid create core v1 namespaced pod params
type CreateCoreV1NamespacedPodHandler interface {
	Handle(CreateCoreV1NamespacedPodParams, interface{}) middleware.Responder
}

// NewCreateCoreV1NamespacedPod creates a new http.Handler for the create core v1 namespaced pod operation
func NewCreateCoreV1NamespacedPod(ctx *middleware.Context, handler CreateCoreV1NamespacedPodHandler) *CreateCoreV1NamespacedPod {
	return &CreateCoreV1NamespacedPod{Context: ctx, Handler: handler}
}

/*CreateCoreV1NamespacedPod swagger:route POST /api/v1/namespaces/{namespace}/pods core_v1 createCoreV1NamespacedPod

create a Pod

*/
type CreateCoreV1NamespacedPod struct {
	Context *middleware.Context
	Handler CreateCoreV1NamespacedPodHandler
}

func (o *CreateCoreV1NamespacedPod) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCoreV1NamespacedPodParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
