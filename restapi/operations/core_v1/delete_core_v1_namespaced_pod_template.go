// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteCoreV1NamespacedPodTemplateHandlerFunc turns a function with the right signature into a delete core v1 namespaced pod template handler
type DeleteCoreV1NamespacedPodTemplateHandlerFunc func(DeleteCoreV1NamespacedPodTemplateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCoreV1NamespacedPodTemplateHandlerFunc) Handle(params DeleteCoreV1NamespacedPodTemplateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteCoreV1NamespacedPodTemplateHandler interface for that can handle valid delete core v1 namespaced pod template params
type DeleteCoreV1NamespacedPodTemplateHandler interface {
	Handle(DeleteCoreV1NamespacedPodTemplateParams, interface{}) middleware.Responder
}

// NewDeleteCoreV1NamespacedPodTemplate creates a new http.Handler for the delete core v1 namespaced pod template operation
func NewDeleteCoreV1NamespacedPodTemplate(ctx *middleware.Context, handler DeleteCoreV1NamespacedPodTemplateHandler) *DeleteCoreV1NamespacedPodTemplate {
	return &DeleteCoreV1NamespacedPodTemplate{Context: ctx, Handler: handler}
}

/*DeleteCoreV1NamespacedPodTemplate swagger:route DELETE /api/v1/namespaces/{namespace}/podtemplates/{name} core_v1 deleteCoreV1NamespacedPodTemplate

delete a PodTemplate

*/
type DeleteCoreV1NamespacedPodTemplate struct {
	Context *middleware.Context
	Handler DeleteCoreV1NamespacedPodTemplateHandler
}

func (o *DeleteCoreV1NamespacedPodTemplate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCoreV1NamespacedPodTemplateParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
