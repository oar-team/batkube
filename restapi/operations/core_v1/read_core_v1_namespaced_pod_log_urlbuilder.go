// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/swag"
)

// ReadCoreV1NamespacedPodLogURL generates an URL for the read core v1 namespaced pod log operation
type ReadCoreV1NamespacedPodLogURL struct {
	Name      string
	Namespace string

	Container                    *string
	Follow                       *bool
	InsecureSkipTLSVerifyBackend *bool
	LimitBytes                   *int64
	Pretty                       *string
	Previous                     *bool
	SinceSeconds                 *int64
	TailLines                    *int64
	Timestamps                   *bool

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ReadCoreV1NamespacedPodLogURL) WithBasePath(bp string) *ReadCoreV1NamespacedPodLogURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *ReadCoreV1NamespacedPodLogURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *ReadCoreV1NamespacedPodLogURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/api/v1/namespaces/{namespace}/pods/{name}/log"

	name := o.Name
	if name != "" {
		_path = strings.Replace(_path, "{name}", name, -1)
	} else {
		return nil, errors.New("name is required on ReadCoreV1NamespacedPodLogURL")
	}

	namespace := o.Namespace
	if namespace != "" {
		_path = strings.Replace(_path, "{namespace}", namespace, -1)
	} else {
		return nil, errors.New("namespace is required on ReadCoreV1NamespacedPodLogURL")
	}

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var containerQ string
	if o.Container != nil {
		containerQ = *o.Container
	}
	if containerQ != "" {
		qs.Set("container", containerQ)
	}

	var followQ string
	if o.Follow != nil {
		followQ = swag.FormatBool(*o.Follow)
	}
	if followQ != "" {
		qs.Set("follow", followQ)
	}

	var insecureSkipTLSVerifyBackendQ string
	if o.InsecureSkipTLSVerifyBackend != nil {
		insecureSkipTLSVerifyBackendQ = swag.FormatBool(*o.InsecureSkipTLSVerifyBackend)
	}
	if insecureSkipTLSVerifyBackendQ != "" {
		qs.Set("insecureSkipTLSVerifyBackend", insecureSkipTLSVerifyBackendQ)
	}

	var limitBytesQ string
	if o.LimitBytes != nil {
		limitBytesQ = swag.FormatInt64(*o.LimitBytes)
	}
	if limitBytesQ != "" {
		qs.Set("limitBytes", limitBytesQ)
	}

	var prettyQ string
	if o.Pretty != nil {
		prettyQ = *o.Pretty
	}
	if prettyQ != "" {
		qs.Set("pretty", prettyQ)
	}

	var previousQ string
	if o.Previous != nil {
		previousQ = swag.FormatBool(*o.Previous)
	}
	if previousQ != "" {
		qs.Set("previous", previousQ)
	}

	var sinceSecondsQ string
	if o.SinceSeconds != nil {
		sinceSecondsQ = swag.FormatInt64(*o.SinceSeconds)
	}
	if sinceSecondsQ != "" {
		qs.Set("sinceSeconds", sinceSecondsQ)
	}

	var tailLinesQ string
	if o.TailLines != nil {
		tailLinesQ = swag.FormatInt64(*o.TailLines)
	}
	if tailLinesQ != "" {
		qs.Set("tailLines", tailLinesQ)
	}

	var timestampsQ string
	if o.Timestamps != nil {
		timestampsQ = swag.FormatBool(*o.Timestamps)
	}
	if timestampsQ != "" {
		qs.Set("timestamps", timestampsQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ReadCoreV1NamespacedPodLogURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ReadCoreV1NamespacedPodLogURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ReadCoreV1NamespacedPodLogURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ReadCoreV1NamespacedPodLogURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ReadCoreV1NamespacedPodLogURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ReadCoreV1NamespacedPodLogURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
