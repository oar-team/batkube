// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ConnectCoreV1HeadNodeProxyHandlerFunc turns a function with the right signature into a connect core v1 head node proxy handler
type ConnectCoreV1HeadNodeProxyHandlerFunc func(ConnectCoreV1HeadNodeProxyParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ConnectCoreV1HeadNodeProxyHandlerFunc) Handle(params ConnectCoreV1HeadNodeProxyParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ConnectCoreV1HeadNodeProxyHandler interface for that can handle valid connect core v1 head node proxy params
type ConnectCoreV1HeadNodeProxyHandler interface {
	Handle(ConnectCoreV1HeadNodeProxyParams, interface{}) middleware.Responder
}

// NewConnectCoreV1HeadNodeProxy creates a new http.Handler for the connect core v1 head node proxy operation
func NewConnectCoreV1HeadNodeProxy(ctx *middleware.Context, handler ConnectCoreV1HeadNodeProxyHandler) *ConnectCoreV1HeadNodeProxy {
	return &ConnectCoreV1HeadNodeProxy{Context: ctx, Handler: handler}
}

/*ConnectCoreV1HeadNodeProxy swagger:route HEAD /api/v1/nodes/{name}/proxy core_v1 connectCoreV1HeadNodeProxy

connect HEAD requests to proxy of Node

*/
type ConnectCoreV1HeadNodeProxy struct {
	Context *middleware.Context
	Handler ConnectCoreV1HeadNodeProxyHandler
}

func (o *ConnectCoreV1HeadNodeProxy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConnectCoreV1HeadNodeProxyParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
