// Code generated by go-swagger; DO NOT EDIT.

package core_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchCoreV1NodeStatusHandlerFunc turns a function with the right signature into a patch core v1 node status handler
type PatchCoreV1NodeStatusHandlerFunc func(PatchCoreV1NodeStatusParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchCoreV1NodeStatusHandlerFunc) Handle(params PatchCoreV1NodeStatusParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchCoreV1NodeStatusHandler interface for that can handle valid patch core v1 node status params
type PatchCoreV1NodeStatusHandler interface {
	Handle(PatchCoreV1NodeStatusParams, interface{}) middleware.Responder
}

// NewPatchCoreV1NodeStatus creates a new http.Handler for the patch core v1 node status operation
func NewPatchCoreV1NodeStatus(ctx *middleware.Context, handler PatchCoreV1NodeStatusHandler) *PatchCoreV1NodeStatus {
	return &PatchCoreV1NodeStatus{Context: ctx, Handler: handler}
}

/*PatchCoreV1NodeStatus swagger:route PATCH /api/v1/nodes/{name}/status core_v1 patchCoreV1NodeStatus

partially update status of the specified Node

*/
type PatchCoreV1NodeStatus struct {
	Context *middleware.Context
	Handler PatchCoreV1NodeStatusHandler
}

func (o *PatchCoreV1NodeStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchCoreV1NodeStatusParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
